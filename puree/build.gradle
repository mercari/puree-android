apply plugin: 'com.android.library'

android {
    compileSdkVersion BuildSettings.compileSdkVersion

    defaultConfig {
        minSdkVersion BuildSettings.minSdkVersion
        targetSdkVersion BuildSettings.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }
    sourceSets {
        test.java.srcDirs += "src/androidTest/java"
    }
}

dependencies {
    api Libs.gson
    api Libs.protobuf_lite
    implementation Libs.jsr305

    testImplementation TestLibs.hamcrest
    testImplementation TestLibs.robolectric
    testImplementation TestLibs.androidXTestCore
    testImplementation TestLibs.androidXTestRunner
    testImplementation TestLibs.androidXTestJUnit

    androidTestImplementation TestLibs.hamcrest
    androidTestImplementation TestLibs.androidXTestCore
    androidTestImplementation TestLibs.androidXTestRunner
    androidTestImplementation TestLibs.androidXTestJUnit
}

// Publishing

apply plugin: 'maven-publish'

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

// Required in order to use bundleReleaseAar task
// See https://stackoverflow.com/a/42160584
project.afterEvaluate {
    publishing.publications {
        "maven"(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            artifact androidSourcesJar
            artifact bundleReleaseAar

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'puree')
                root.appendNode('description', Publishing.description)
                root.appendNode('url', Publishing.url)

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', Publishing.issueUrl)

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/mercari/puree-android')
                scm.appendNode('connection', 'scm:git@github.com:puree/puree-android.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:puree/puree-android.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'MIT')
                license.appendNode('url', Publishing.licenseUrl)
                license.appendNode('distribution', 'repo')

                // Add all dependencies in pom metadata
                final dependenciesNode = root.appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.properties.excludeRules.empty) {
                        // Add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_API_KEY")

    setPublications("maven")
    setConfigurations("archives")

    publish = true

    pkg {
        repo = 'maven'
        name = 'puree'
        desc = Publishing.description
        websiteUrl = Publishing.url
        issueTrackerUrl = Publishing.issueUrl
        vcsUrl = 'https://github.com/mercari/puree-android.git'
        licenses = ['MIT']
    }
}
